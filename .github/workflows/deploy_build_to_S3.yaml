name: Build & Deploy Next.js â†’ S3

on:
  push:
    branches: [main]          # trigger only when main is updated

env:
  BUCKET_NAME: pranavbedre.in # <-- your S3 static-site bucket
  REGION: ap-south-1          # <-- the bucketâ€™s region (e.g. Mumbai)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1 Fetch the latest commit
      - uses: actions/checkout@v4            # :contentReference[oaicite:0]{index=0}

      # 2 Set up Node (caches npm automatically)
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 3 Install deps & build your statically-exported site
      - name: Install dependencies
        run: npm ci

      - name: Build (creates ./out)
        run: npm run build                   # make sure this script runs `next export`

      # 4 Authenticate to AWS (OIDC-role or long-lived keysâ€”pick ONE)
      # Option A (ðŸ”’ recommended): assume an IAM role via OIDC
      # - uses: aws-actions/configure-aws-credentials@v5
      #    with:
      #      role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      #      aws-region: ${{ env.REGION }}

      # Option B (simple): use access keys stored as repo secrets
      - uses: aws-actions/configure-aws-credentials@v5  # :contentReference[oaicite:1]{index=1}
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.REGION }}

      # 5 Sync the freshly-built files to S3
      - name: Deploy to S3
        run: |
          aws s3 sync ./out s3://$BUCKET_NAME \
            --acl public-read  \
            --follow-symlinks  \
            --delete           # removes files that no longer exist locally

      # (Optional) 6 If CloudFront sits in front of the bucket, invalidate its cache
      # - name: Invalidate CloudFront
      #   run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CF_DIST_ID }} --paths "/*"
